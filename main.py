import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, Integer, BigInteger, select
import logging
from aiogram.client.bot import DefaultBotProperties



default_bot_properties = DefaultBotProperties(parse_mode="HTML")


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

# ==== üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ====
BOT_TOKEN = "7862255887:AAG3G-76mmHj15DaZ8KGfWWcc6cVAhq0I7w"
REQUIRED_CHANNEL = "@ShimbayNukusTaxi24_7"
ADMIN_ID = 8075429830  # Admin IDs
DATABASE_URL = "sqlite+aiosqlite:///./taxi_bot.db"

# ==== üß± –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ====
Base = declarative_base()
engine = create_async_engine(DATABASE_URL, echo=False)
SessionLocal = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)
START_TEXT = """

‚û§ –¢–ê–ö–°–ò-–ë–û–¢ | –ù”®–ö–ò–° - –®–´–ú–ë–ê–ô

–•–æ—à –∫–µ–ª–¥–∏“£–∏–∑!
–ë—É–ª –±–æ—Ç –ù”©–∫–∏—Å “≥”ô–º –®—ã–º–±–∞–π –∞—Ä–∞—Å—ã–Ω–¥–∞ —Ç–∞–∫—Å–∏ –±—É–π—ã—Ä—Ç–ø–∞ –µ—Ç–∏—û–¥–∏“£ –µ“£ ”ô–ø–∏—û–∞–π—ã —É—Å—ã–ª—ã.

üîπ –ï–ö–ò –ñ”®–ù–ï–õ–ò–° –ê–†–¢–ò“ö–®–ê –ï–ú–ï–°.
üîπ “≤”ò–ú–ú–ï –ù”ò–†–°–ï –¢–ï–ó “≤”ò–ú –ö“Æ–¢–ò–õ–ú–ï–ì–ï–ù “≤–ê–õ–î–ê –ò–°–õ–ï–ô–î–ò.
üîπ –ê–ô–î–ê–é–®–ò–õ–ê–† –¢–ï–ö–°–ï–†–ò–õ–î–ò, –ë–£–ô–´–†–¢–ü–ê–õ–ê–† –ë–ê“ö–õ–ê–é –ê–õ–î–ò–ù–î–ê.
üîπ –°–ò–ó –¢–ê–ù–õ–ê–ô–°–ò–ó - –ë–ò–† –ù–ï–®–ï –°–ï–ö–£–ù–î–¢–ê

‚úÖ –ú–∞—Ä—à—Ä—É—Ç —Ç–∞“£–ª–∞—Å–∞“£—ã–∑ –±–æ–ª–¥—ã, “õ–∞–ª“ì–∞–Ω—ã –º–µ–Ω–µ–Ω –±–∏–∑ —à—É“ì—ã–ª–ª–∞–Ω–∞–º—ã–∑.

‚úÖ 24/7 –∏—Å–ª–µ–π–¥–∏.
‚úÖ ”ò–ø–∏—û–∞–π—ã. –¢–µ–∑. –ò—Å–µ–Ω–∏–º–ª–∏.
–®—ã–º–±–∞–π–¥–∞–Ω –ù–æ–∫–∏—Å–∫–µ - –ù–æ–∫–∏—Å—Ç–µ–Ω –®—ã–º–±–∞–π–≥–∞ —Ç–∞–∫—Å–∏ –∫–µ—Ä–µ–∫ –±–æ–ª—Å–∞ —Ç–æ–º–µ–Ω–¥–µ–≥–∏ –Ω–æ–º–µ—Ä–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã–Ω

‚òéÔ∏è +998905774447

‚òéÔ∏è +998994804848

–ö–∞–Ω–∞–ª—ã–º—ã–∑–≥–∞ –∫–æ—Å—ã–ª—ã–Ω:
https://t.me/ShimbayNukusTaxi24_7
https://t.me/ShimbayNukusTaxi

"""

TEXT_NOKIS_SHYMBAY = """
üöï <b>–ù–æ–∫–∏—Å—Ç–µ–Ω ‚Üí –®—ã–º–±–∞–π–≥–∞</b>  
   - –ñ–æ–ª —É–∑—ã–Ω–ª—ã“ì—ã: <i>59,3 –∫–º</i>  
   - –£–∞“õ—ã—Ç: <i>1 —Å–∞–≥–∞—Ç</i>

üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: +998905774447
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: +998994804848

‚úÖ <b>“ö–æ—Å—ã–º—à–∞ —Ö—ã–∑–º–µ—Ç–ª–µ—Ä</b>: –ê–ú–ê–ù–ê–¢ –ë–û–õ–°–ê –ê–õ–´–ü –ö–ï–¢–ï–ú–ò–ó –•–ê–ú –ë–ê–ì–ê–ñ –ë–ê–†
"""

TEXT_SHYMBAY_NOKIS = """
üöó <b>–®—ã–º–±–∞–π–¥–∞–Ω ‚Üí –ù–æ–∫–∏—Å–∫–µ</b>
   - –ñ–æ–ª —É–∑—ã–Ω–ª—ã“ì—ã: <i>59,3 –∫–º</i>   
   - –£–∞“õ—ã—Ç: <i>1 —Å–∞–≥–∞—Ç</i> 

üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: +998905774447
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: +998994804848
‚úÖ <b>“ö–æ—Å—ã–º—à–∞ —Ö—ã–∑–º–µ—Ç–ª–µ—Ä</b>: –ê–ú–ê–ù–ê–¢ –ë–û–õ–°–ê –ê–õ–´–ü –ö–ï–¢–ï–ú–ò–ó –•–ê–ú –ë–ê–ì–ê–ñ –ë–ê–†
"""


class UserStats(Base):
    __tablename__ = "user_stats"
    id = Column(Integer, primary_key=True)
    user_id = Column(BigInteger, unique=True, index=True)
    interactions = Column(Integer, default=1)

# ==== üéõ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ====
def get_user_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèô Shimbay ‚Üí N√≥kis")],
            [KeyboardButton(text="üåÜ N√≥kis ‚Üí Shimbay")]
        ],
        resize_keyboard=True
    )

def get_admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèô Shimbay ‚Üí N√≥kis")],
            [KeyboardButton(text="üåÜ N√≥kis ‚Üí Shimbay")],
            [KeyboardButton(text="üìä Statistika"), KeyboardButton(text="Xabarlandƒ±rƒ±w")]
        ],
        resize_keyboard=True
    )

# ==== ü§ñ –õ–æ–≥–∏–∫–∞ ====
router = Router()

#async def check_subscription(bot: Bot, user_id: int) -> bool:
#    try:
    #    member = await bot.get_chat_member(chat_id=REQUIRED_CHANNEL, user_id=user_id)
    #    return member.status in ("member", "administrator", "creator")
 #   except Exception:
 #       return False

async def add_or_update_user(user_id: int):
    async with SessionLocal() as session:
        result = await session.execute(select(UserStats).where(UserStats.user_id == user_id))
        user = result.scalar_one_or_none()

        if user:
            user.interactions += 1
        else:
            user = UserStats(user_id=user_id)
            session.add(user)

        await session.commit()

async def broadcast_to_all_users(bot: Bot, text: str):
    async with SessionLocal() as session:
        result = await session.execute(select(UserStats.user_id))
        user_ids = [row[0] for row in result.fetchall()]

    success = 0
    for user_id in user_ids:
        try:
            await bot.send_message(chat_id=user_id, text=text)
            success += 1
        except Exception:
            pass
    return success

# ==== üéØ –•–µ–Ω–¥–ª–µ—Ä—ã ====

@router.message(CommandStart())
async def cmd_start(message: Message):
    bot = message.bot
    user_id = message.from_user.id

 #   if not await check_subscription(bot, user_id):
 #       await message.answer("‚ùó D√°slep kanal«µa a«µza bolƒ±≈Ñ: @ShimbayNukusTaxi24_7")
  #      return

    await add_or_update_user(user_id)

    keyboard = get_admin_keyboard() if user_id == ADMIN_ID else get_user_keyboard()

    await message.answer(
        "S√°lemetsiz be! Qay j√≥neliske taksi kerek?" + START_TEXT,
        reply_markup=keyboard
    )

@router.message(F.text == "üìä Statistika")
async def show_stats(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    async with SessionLocal() as session:
        result = await session.execute(select(UserStats))
        users = result.scalars().all()

    total_users = len(users)
    total_interactions = sum(u.interactions for u in users)

    await message.answer(
        f"üìà –ñ–∞–ª–ø—ã “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä: <b>{total_users}</b>\n"
        f"üìä –ñ–∞–ª–ø—ã ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä: <b>{total_interactions}</b>",

    )

@router.message(F.text == "Xabarlandƒ±rƒ±w")
async def notify_info(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("‚úçÔ∏è Jiberginiz kelgen xabardƒ± jazƒ±≈Ñ, onƒ± h√°mme k√≥redi..")

@router.message(F.text)
async def message_handler(message: Message):
    user_id = message.from_user.id
    text = message.text


    if user_id == ADMIN_ID and text not in ["üìä Statistika", "Xabarlandƒ±rƒ±w", "üèô Tashkent ‚Üí N√≥kis", "üåÜ N√≥kis ‚Üí Tashkent"]:
        count = await broadcast_to_all_users(message.bot, f"üì¢ Admin xabarƒ±:\n\n{text}")
        await message.answer(f"‚úÖ Xabar {count} adam«µa jiberildi.")
        return

    if text in "üèô Shimbay ‚Üí N√≥kis":
        await add_or_update_user(user_id)
        await message.answer(f"‚úÖ " + TEXT_SHYMBAY_NOKIS)


    if text in "üåÜ N√≥kis ‚Üí Shimbay":
        await add_or_update_user(user_id)
        await message.answer(f"‚úÖ " + TEXT_NOKIS_SHYMBAY)


async def main():

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    default_bot_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
    bot = Bot(token=BOT_TOKEN, default=default_bot_properties)
    dp = Dispatcher()
    dp.include_router(router)

    try:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")

    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
